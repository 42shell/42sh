# async subshell
cat && sleep 100 & sleep .1

# assert there are a subshell and a cat process
ps --ppid $$,$! -o state,comm

# kill the cat process
pkill -9 -P $! cat 2>&/dev/null && sleep .1

# assert subshell still there and there is no sleep process
ps --ppid $$,$! -o state,comm

# send -CONT to the subshell to terminate it
kill -CONT $! 2>&/dev/null && sleep .1

# assert subshell and cat processes have disappeared
ps --ppid $$,$! -o state,comm

###########################################################################################
###########################################################################################

# async brace group
{ cat | sleep 100; } & sleep .1

# assert all processes are there, sleep may be running or stopped depending on timing ?
ps --ppid $$,$! -o state,comm

# kill the cat process
pkill -9 -g $! cat 2>&/dev/null && sleep .1

# assert sleep process, zombie cat
ps --ppid $$,$! -o state,comm

# kill the sleep process
pkill -9 -g $! sleep 2>&/dev/null && sleep .1

# assert zombie cat, zombie sleep
ps --ppid $$,$! -o state,comm

# send -CONT to the subshell to terminate it
kill -CONT $! 2>&/dev/null && sleep .1

# assert subshell and cat/sleep processes have disappeared
ps --ppid $$,$! -o state,comm

###########################################################################################
# async in subshells
###########################################################################################

# subshell forks cat asynchronously with stdin=/dev/null, cat exit immediately
(cat & sleep 100) & sleep .1
ps --ppid $$,$! -o state,comm
pkill -9 -g $! 2>&/dev/null && sleep .1

# assert sleep processes running
(cat & sleep 100 & sleep 200) & sleep .1
ps --ppid $$,$! -o state,comm
pkill -9 -g $! 2>&/dev/null && sleep .1

###########################################################################################
###########################################################################################

# subshell in subshell
# the subshell forks another subshell in async to run the &&, and exits. The child subshell
# shall wait for the command to finish. This is not optimized, one subshell would be enough
(true && sleep 100 & sleep 200) & sleep .1

# assert there are a subshell and a sleep process/ using sh cause I need cmd substitution to
# get the pid of the first sleep of the command

sh -c "PIDS=$(pgrep -g $! | tr '\n' ',' | sed 's/,$/\n/'); ps --pid \$PIDS -g $! -o state,comm"

# kill the sleep processes
pkill -9 -g $! sleep 2>&/dev/null && sleep .1

# assert all processes have finished
ps --ppid $$,$! -o state,comm
